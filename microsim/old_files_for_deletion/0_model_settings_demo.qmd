---
title: "Model settings demonstration"
format: html
editor: visual
---

This document goes through each of the functions in the model settings script for the SIMAH microsimulation and explains what each function does - each function can be looked at in detail using the drop down menus.

First set up all of the settings for the simulation run.

```{r}
library(microsimpackage)
library(dplyr)
library(readr)
library(tidyr)

###set working directory to the main "SIMAH" folder in your directory 
WorkingDirectory <- "~/Google Drive/SIMAH Sheffield/RSA/Microsim_workshop/workshop_data/"

set.seed(42)

options(scipen=999)

######################EDIT ONLY BELOW HERE ##################################################

# which geography -  needs to be written as USA or full state name 
SelectedState <- "USA"

# Size of population - needs to be a population size available in the data folder
PopulationSize <- 1000000

# switch on and off migration and deaths
migrationdeaths <- 1

# switch on and off education updates
updatingeducation <- 1

# switch on and off alcohol updates
updatingalcohol <- 1

# switch between modelling mortality and morbidity (mortality = 1)
mortality <- 1

# switch on or off liver cirrhosis modelling
cirrhosis <- 0

# switch between CASCADE and SIMAH versions
model <- "SIMAH"

####################EDIT ONLY ABOVE HERE ##################################################

```

This next section calculates the proportion of the selected geography that is being simulated - to adjust all the other model settings to this sized population

```{r}
# what proportion of the population does this represent
WholePopSize <- read.csv(paste0(WorkingDirectory,"fullpopcounts.csv")) %>% 
  filter(STATE==SelectedState)

proportion <- PopulationSize/WholePopSize$total
proportion <- ifelse(proportion>1,1,proportion)
```

## Representative synthetic population

This section reads in the baseline population file - this file should already exist in your data folder.
There are two different versions of the baseline population for the SIMAH (starts in 2000) and CASCADE (starts in 1984) versions of the simulation.

```{r}
# read in base population
if(model=="SIMAH"){
  basepop <- read_csv(paste0(WorkingDirectory, SelectedState, "basepop", PopulationSize, ".csv"),
                      show_col_types = FALSE)
}else if(model=="CASCADE"){
  basepop <- read_csv(paste0(WorkingDirectory, SelectedState, "basepopCASCADE", PopulationSize, ".csv"))
}
# save a copy of original population files
baseorig <- basepop

# set microsim individuals IDs 
microsim.init.id <- 1:nrow(basepop)
basepop <- cbind(microsim.init.id, basepop)
```

This is the first function - reading in the BRFSS data

```{r, file="~/Google Drive/SIMAH Sheffield/SIMAH_code/microsimpackage/R/load_brfss.R"}
#| code-fold: true
#| code-summary: "Function: load_brfss.R"
```

*Note for the purposes of this tutorial - the BRFSS data has been sub-sampled to enable the model to run more quickly*

Use the function to read in the BRFSS data

```{r}
# read in BRFSS data for migrants and 18-year-olds entering the model
brfss <- load_brfss(model,SelectedState,WorkingDirectory)
```

## Add and remove individuals due to births and migration

Function to read in the death rates data

```{r, file="~/Google Drive/SIMAH Sheffield/SIMAH_code/microsimpackage/R/load_death_rates.R"}
#| code-fold: true
#| code-summary: "Function: load_death_rates.R"
```

Use the function to read in death rates data based on CDC data

```{r}
death_rates <- load_death_rates(model, proportion, SelectedState, WorkingDirectory)
```

Function to read in the migration in and out rates data

```{r, file="~/Google Drive/SIMAH Sheffield/SIMAH_code/microsimpackage/R/load_migration_rates.R"}
#| code-fold: true
#| code-summary: "Function: load_migration_rates.R"
```

Use the function to read in the migration in and out rates (derived from ACS data)

```{r}
# read in migration in and out rates and project rates forwards to 2025 (in case needed)
migration_rates <- load_migration_rates(SelectedState, WorkingDirectory)
```

## Update education

Function to read in education transitions data and set up the brfss and base population ready for simulating education (imputing a new education level for individuals in the "some college" category based on which year of college they are in (based on ACS data)

```{r, file="~/Google Drive/SIMAH Sheffield/SIMAH_code/microsimpackage/R/load_education_transitions.R"}
#| code-fold: true
#| code-summary: "Function: load_education_transitions.R"
```

Use this function to get education transition probabilities and to modify the BRFSS and base population education.
The output of this function returns a list with 3 components and the following lines of code extract each component

```{r}
# load in the education transition rates
list <- load_education_transitions(SelectedState, basepop, brfss, WorkingDirectory)
education_transitions <- list[[1]]
basepop <- list[[2]]
brfss <- list[[3]]
rm(list)
```

## Update alcohol consumption

Function to read in alcohol transition probabilities and set up the data for transitioning alcohol use (assigning an alcohol use category to base population and BRFSS individuals)

```{r, file="~/Google Drive/SIMAH Sheffield/SIMAH_code/microsimpackage/R/load_alcohol_transitions.R"}
#| code-fold: true
#| code-summary: "Function: load_education_transitions.R"
```

Use this function to generate alcohol transition probabilities and corresponding adjusted data files

```{r}
# load in alcohol transition rates
list <- load_alcohol_transitions(SelectedState, basepop,brfss, WorkingDirectory)
alcohol_transitions <- list[[1]]
basepop <- list[[2]]
brfss <- list[[3]]
rm(list)
```

# Example running microsimulation 

## Run microsimulation for one year - first set up the output variables and settings not covered in model settings section

```{r}
seed <- (Sys.time())
samplenum <- 1
set.seed(seed)
Summary <- list()
DeathSummary <- list()
PopPerYear <- list()
#set y to 2001 - for demonstration purposes 
y <- 2001
```

## Now apply functions to run microsimulation

```{r}
#add and remove migrants
if(y>=2001){
  basepop <- inward_migration(basepop,migration_rates,y, brfss)
  basepop <- outward_migration(basepop,migration_rates,y)
}
```

```{r}
# apply death rates and summarise deaths by cause
if(y>=2000){
basepop <- apply_death_rates(basepop, death_rates, y)
DeathSummary[[paste(y)]] <- basepop %>% filter(dead==1) %>% dplyr::select(agecat, microsim.init.race, microsim.init.sex, microsim.init.education,
                                              dead, cause) %>% mutate(year=y, seed=seed)
basepop <- basepop %>% filter(dead==0) %>% dplyr::select(-c(dead, cause))
}
```

```{r}
# transition education for individuals aged 34 and under
if(updatingeducation==1 & y>2000){
  totransition <- basepop %>% filter(microsim.init.age<=34)
  tostay <- basepop %>% filter(microsim.init.age>34)
  totransition <- education_setup(totransition,y)
  totransition <- totransition %>% group_by(cat) %>% do(transition_ed(., education_transitions))
  totransition$microsimnewED <- totransition$newED
  totransition$microsim.init.education <- ifelse(totransition$microsimnewED=="LEHS","LEHS",
                                                 ifelse(totransition$microsimnewED=="SomeC1","SomeC",
                                                        ifelse(totransition$microsimnewED=="SomeC2","SomeC",
                                                               ifelse(totransition$microsimnewED=="SomeC3","SomeC",
                                                                      ifelse(totransition$microsimnewED=="College","College",NA)
                                                                      ))))
  totransition <- totransition %>% ungroup() %>% dplyr::select(-c(prob, state, year, cat, newED))
  basepop <- rbind(totransition, tostay)
}
```

```{r}
# update alcohol use categories
if(updatingalcohol==1 & y>2000){
  basepop <- basepop %>% ungroup() %>% mutate(
    agecat = cut(microsim.init.age,
                 breaks=c(0,20,25,29,39,49,64,100),
                 labels=c("18-20","21-25","26-29","30-39","40-49","50-64","65+")),
    cat = paste(agecat, microsim.init.sex,
                                      microsim.init.race, microsim.init.education,
                                      AlcCAT, sep="_"),
                                prob = runif(nrow(.)))
  basepop <- basepop %>% group_by(cat) %>% do(transition_alcohol(., alcohol_transitions))
  basepop <- basepop %>%
    mutate(AlcCAT = newALC) %>% ungroup() %>% dplyr::select(-c(cat, prob, newALC))
  # allocate a numeric gpd for individuals within category bounds
  # basepop <- allocate_gramsperday(basepop, DataDirectory)
  }

# if policy flag switched on - simulate a reduction in alcohol consumption
# if(policy==1){
# basepop <- reduce_consumption(basepop, percentreduction)
# }
```

```{r}
# save a population summary
PopPerYear[[paste(y)]] <- basepop %>% mutate(year=y, seed=seed, samplenum=samplenum)

#delete anyone over 79
###then age everyone by 1 year and update age category
basepop <- basepop %>% mutate(microsim.init.age = microsim.init.age+1,
                              agecat = cut(microsim.init.age,
                                           breaks=c(0,19,24,34,44,54,64,74,100),
                                           labels=c("15-19","20-24","25-34","35-44","45-54","55-64",
                                                    "65-74","75-79")))
basepop <- subset(basepop, microsim.init.age<=79)
```

## Postprocessing output

3 main postprocessing functions that compare

1.  Demographic differences (education)
2.  Alcohol consumption
3.  Mortality over time

These return a dataset comparing the output of the simulation to the observed data (American Community Survey, BRFSS or CDC mortality rates).

# Running the simulation (in full)

## Running the simulation: task 

-   Open 1_run_microsimulation.R
-   Run all lines of code up to and including the run_microsim() function
-   Explore changing the output_type in model settings between "demographics", "alcohol" and "mortality"
-   Summarise the output for each function and look at the plots
-   Compare with someone your summarised outputs for the same output type
    -   These should differ slightly due to random number sampling
